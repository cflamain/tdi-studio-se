<%@ jet 
imports="
    	org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.commons.utils.generation.CodeGenerationUtils
		java.util.List
		java.util.ArrayList
		java.util.LinkedList
		java.util.Map
"
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	String cid = node.getUniqueName();

	String dbtable = null;
	String uniqueNameConnection = null;
	INode previousNode = null;
	boolean isTableNameVariable="true".equals(ElementParameterParser.getValue(node, "__IS_TABLE_NAME_VARIABLE__"));
	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");
%>
	String select_query_<%=cid %> = null;
	String selectQueryColumnsName_<%=cid %> = null;
<%
	List<IConnection> connections = (List<IConnection>) node.getIncomingConnections();
	if(connections != null && connections.size() > 0 && connections.get(0) != null) {
	    IConnection connection = connections.get(0);
	    previousNode = connection.getSource();
	    String previousComponentName = previousNode.getUniqueName();
		dbtable = connection.getName();
		uniqueNameConnection = connection.getUniqueName();
%>
		select_query_<%=cid %> = (String) globalMap.get("<%=previousComponentName%>"+"QUERY"+"<%=uniqueNameConnection%>");
		selectQueryColumnsName_<%=cid %> = (String) globalMap.get("<%=previousComponentName%>"+"QUERY_COLUMNS_NAME"+"<%=uniqueNameConnection%>");
<%
	}
	
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
    String dbhost = null;
    String dbport = null;
    String dbname = null;
    String dbuser = null;
    boolean useExistingConn = false;
    if(previousNode != null) {
        dbhost = ElementParameterParser.getValue(previousNode, "__HOST__");
        dbport = ElementParameterParser.getValue(previousNode, "__PORT__");
        dbname = ElementParameterParser.getValue(previousNode, "__DBNAME__");
        dbuser = ElementParameterParser.getValue(previousNode, "__USER__");
        useExistingConn = ("true").equals(ElementParameterParser.getValue(previousNode, "__USE_EXISTING_CONNECTION__"));
    }
	String differenttable = ElementParameterParser.getValue(node, "__DIFFERENT_TABLE_NAME__");
	boolean useDifferentTable = "true".equals(ElementParameterParser.getValue(node, "__USE_DIFFERENT_TABLE__"));
    String whereClause = ElementParameterParser.getValue(node, "__WHERE_CLAUSE__");
    boolean useWhereTable = ("true").equals(ElementParameterParser.getValue(node, "__USE_WHERE_CONDITIONS_TABLE__"));
	List<Map<String, String>> whereConditions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__WHERE_CONDITIONS_TABLE__");
	String tableName=null;
	if(useDifferentTable){
		tableName=differenttable;
	}else{
		if(isTableNameVariable){
			tableName=dbtable;
		}else{
			tableName="\""+dbtable +"\"";
		}
	}
%>
java.sql.Connection conn_<%=cid%> = null;
<%
	if(useExistingConn) {
	    String connection = ElementParameterParser.getValue(previousNode, "__CONNECTION__");
	    String conn = "conn_" + connection;
%>
    	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
<%
		log4jCodeGenerateUtil.useExistConnection(node);
	} else {
	%>
	String driverClass_<%=cid%> = "org.netezza.Driver";
	java.lang.Class.forName(driverClass_<%=cid%>);
	<%
	if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
	    %>
	    String url_<%=cid%> = "jdbc:netezza://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
	    <%
	} else {
	    %>
	    String url_<%=cid%> = "jdbc:netezza://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + "?" + <%=dbproperties%>;
	    <%
	}	
	%>
		String dbUser_<%=cid %> = <%=dbuser%>;

		<%
		String passwordFieldName = "__PASS__";
		%>

		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/eltpassword.javajet"%>

		String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

	<%
		log4jCodeGenerateUtil.debugConnectionParams(node);
		log4jCodeGenerateUtil.connect(node);
	}
%>

<%
	List<IMetadataColumn> columnList = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	IMetadataTable metadata = null;
	if(metadatas !=null && metadatas.size()>0){
		metadata = metadatas.get(0);
		if(metadata != null){
			columnList = metadata.getListColumns();
		}
	}
%>

	java.sql.PreparedStatement pstmt_<%=cid %> =null;
<%
	if(columnList != null && columnList.size()>0){

		class Column{
		
			IMetadataColumn column;
			
			String name;
			
			String sqlStmt;
			
			String value;
			
			boolean addCol;
			
			List<Column> replacement = new ArrayList<Column>();
			
			public Column(IMetadataColumn column){
				this.column = column;
				String columname = column.getOriginalDbColumnName();
				if(columname!=null && columname.trim().length()>0){
					this.name = columname;
				}else{
					this.name = column.getLabel();
				}
				this.sqlStmt = "=?";
				this.value = "?";
				this.addCol =false;
			}
			
			public boolean isReplaced(){
				return replacement.size()>0;
			}
			
			public List<Column> getReplacement(){
				return this.replacement;
			}
			
			public IMetadataColumn getColumn(){
				return this.column;
			}
			
			public String getName(){
				return this.name;
			}
			
			public boolean isAddCol(){
				return this.addCol;
			}
			
			public String getSqlStmt(){
				return this.sqlStmt;
			}
			
			public String getValue(){
				return this.value;
			}
		}
		
		StringBuilder insertColName = new StringBuilder();
		StringBuilder insertValueStmt = new StringBuilder();
		StringBuilder updateSetStmt = new StringBuilder();
		StringBuilder updateWhereStmt = new StringBuilder();
		List<Column> stmtStructure =  new LinkedList<Column>();
		StringBuilder mergeCondition = new StringBuilder ();

		for(IMetadataColumn column:columnList){
			stmtStructure.add(new Column(column));
		}

		int counterOuter =0;
		boolean firstKey = true;
		boolean firstNoneKey = true;
		boolean isfirstKey = true;
		for(Column colStmt:stmtStructure){
		    String colName=colStmt.getName();
            if (colStmt.getColumn().isKey()){
                if (isfirstKey) {
                    isfirstKey = false;
                }else {
                    mergeCondition.append(" AND ");
                }
                mergeCondition.append("target." + colName + "=source." + colName);
            }
			String suffix = ",";
			
			if(colStmt.isReplaced()){		
				List<Column> replacedColumns = colStmt.getReplacement();
				int counterReplace = 0;
				if(counterOuter==(stmtStructure.size()-1) && counterReplace==(replacedColumns.size()-1) ){
					suffix = "";
				}
				for(Column replacement:replacedColumns){
					insertColName.append(replacement.getName()+suffix);
					insertValueStmt.append(replacement.getSqlStmt()+suffix);
					if(!colStmt.getColumn().isKey()){
						if(!firstNoneKey){
							updateSetStmt.append(",");
						}else{
							firstNoneKey = false;
						}
						updateSetStmt.append(replacement.getName());
						updateSetStmt.append(replacement.getSqlStmt());
					}else{
						if(!firstKey){
							updateWhereStmt.append(" AND ");
						}else{
							firstKey = false;
						}
						updateWhereStmt.append(replacement.getName());
						updateWhereStmt.append(replacement.getSqlStmt());
					}
					counterReplace++;
				}
			}else{
				if(counterOuter==(stmtStructure.size()-1)){
					suffix = "";
				}
				if(colStmt.isAddCol()){
					insertColName.append(colStmt.getName()+suffix);
					insertValueStmt.append(colStmt.getSqlStmt()+suffix);
					updateSetStmt.append(colStmt.getName());
					updateSetStmt.append(colStmt.getSqlStmt()+suffix);
				}else{
					insertColName.append(colStmt.getName()+suffix);
					insertValueStmt.append(colStmt.getValue()+suffix);
					updateSetStmt.append(colStmt.getName()+"=\"+routines.system.StringUtils.splitSQLColumns(selectQueryColumnsName_"+ cid +")[ "+ counterOuter + "]+\"" +suffix);
				}
			}
			counterOuter ++;
		}

		if(("INSERT").equals(dataAction)){
%>	
		String insertQuery_<%=cid %> = "INSERT INTO "+<%=tableName%>+"(<%=insertColName.toString()%>) ("+select_query_<%=cid %>+")";
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(insertQuery_<%=cid %>);
<%
		} else if (("UPDATE").equals(dataAction)) {
%>
			StringBuffer updateQuery_<%=cid %> = new StringBuffer("UPDATE "+<%=tableName%>);
			updateQuery_<%=cid %>.append(" SET <%=updateSetStmt.toString()%> " +select_query_<%=cid %>.substring(select_query_<%=cid %>.indexOf("FROM")));
<%
			if((CodeGenerationUtils.hasAlphaNumericCharacter(whereClause) && (!useWhereTable)) || (useWhereTable && whereConditions.size() > 0)) {
%>
				if(select_query_<%=cid %>.indexOf("WHERE")==-1){
					updateQuery_<%=cid %>.append("  WHERE ");
				}else{
					updateQuery_<%=cid %>.append("  AND ");
				}
<%
				if(!useWhereTable) {
%>
					updateQuery_<%=cid %>.append(<%=CodeGenerationUtils.replaceAllCrBySpace(whereClause)%>);
<%
				} else {
					String operator = "\"\"";
					for(Map<String, String> whereCondition : whereConditions) {
						String column_condition = whereCondition.get("COLUMN");
						String function_condition = whereCondition.get("FUNCTION");
						String value_condition = whereCondition.get("VALUE_SQL");
%>
						updateQuery_<%=cid %>.append(<%=operator %> + <%=column_condition %> + " " + <%=function_condition %> + " " + <%=value_condition %>);
<%
						operator = "\" AND \"";
					}
				}
			}
%>
			pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(updateQuery_<%=cid %>.toString());
<%		
		}else if (("DELETE").equals(dataAction)){
%>
			StringBuffer deleteQuery_<%=cid %> = new StringBuffer("DELETE  FROM "+<%=tableName%>);
			deleteQuery_<%=cid %>.append(" WHERE EXISTS ("+select_query_<%=cid %>+")");
<%
			if(!useWhereTable) {
				if(CodeGenerationUtils.hasAlphaNumericCharacter(whereClause)) {
%>
					deleteQuery_<%=cid %>.append("  AND " + <%=CodeGenerationUtils.replaceAllCrBySpace(whereClause)%>);
<%
				}
			} else {
				if(whereConditions.size() > 0) {
					for(Map<String, String> whereCondition : whereConditions) {
						String column_condition = whereCondition.get("COLUMN");
						String function_condition = whereCondition.get("FUNCTION");
						String value_condition = whereCondition.get("VALUE_SQL");
%>
						deleteQuery_<%=cid %>.append("  AND " + <%=column_condition %> + " " + <%=function_condition %> + " " + <%=value_condition %>);
<%
					}
				}
			}
%>
			pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(deleteQuery_<%=cid %>.toString());
<%		
    }else if ("MERGE".equals(dataAction)) {
        // get parameter
        boolean useMergeUpdate = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_MERGE_UPDATE__"));
        boolean useMergeInsert = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_MERGE_INSERT__"));
        boolean useMergeDelete = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_MERGE_DELETE__"));
    	if(!useMergeUpdate && !useMergeInsert && !useMergeDelete){
    	%>
        	if(true){
            	throw new RuntimeException("Need to choose at least one of \"Merge insert/update/delete\".");
        	}
    	<%
    	}
        boolean useUpdateCondition =  "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_MERGE_UPDATE_CONDITION__"));
        boolean useDeleteCondition = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_MERGE_DELETE_CONDITION__"));
        boolean useInsertCondition = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__USE_MERGE_INSERT_CONDITION__"));
    
    
    
        List<Map<String, String>> updateColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMA_UPDATE__");
        List<Map<String, String>> insertColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMA_INSERT__");
    
        StringBuilder mergeUpdate = new StringBuilder() ;
        StringBuilder mergeInsertName = new StringBuilder() ;
        StringBuilder mergeInsertValue = new StringBuilder() ;
        if(mergeCondition==null || mergeCondition.length()==0){
        %>
            if(true){
                throw new RuntimeException("Need at least one key column in the schema setting.");
            }
        <%
        }
        %>
        String mergeQuery_<%=cid %> = "MERGE INTO "+ <%=tableName%> +" target"  + " USING (" + select_query_<%=cid %> + ") source ON (" +
    
            "<%=mergeCondition%>" + ")" ;

        <%
        if (useMergeUpdate) {
            boolean isfirstUpdateSet = true;
            String keyColumnName=null;
            for(Map<String, String> keyColumn:updateColumns){
                if (keyColumn.get("UPDATE").equals("true")) {
                    if (isfirstUpdateSet) {
                        isfirstUpdateSet = false;
                    }else {
                        mergeUpdate.append(",");
                    }
                    keyColumnName=keyColumn.get("SCHEMA_COLUMN");
                    keyColumnName=new Column(metadata.getColumn(keyColumnName)).getName();
                    mergeUpdate.append("target."  + keyColumnName + "=source." + keyColumnName);
                }
            }
            %>
            mergeQuery_<%=cid %> += " WHEN MATCHED  " ;
            <%
            if (useUpdateCondition) {
                String mergeUpdateCondition = ElementParameterParser.getValue(node,"__MERGE_UPDATE_CONDITION__");
                if(mergeUpdateCondition != null && mergeUpdateCondition.length() >= 0){
                %>
                    mergeQuery_<%=cid %> += "AND " + <%=mergeUpdateCondition %>;
                <%  
                }
            }
            %>
            mergeQuery_<%=cid %> += " THEN UPDATE SET <%=mergeUpdate%> " ;
        <%
        }
        if(useMergeDelete){
        %>
            mergeQuery_<%=cid %> += " WHEN MATCHED  " ;
            <%
            if (useDeleteCondition) {
                String mergeDeleteCondition = ElementParameterParser.getValue(node,"__MERGE_DELETE_CONDITION__");
                if(mergeDeleteCondition != null && mergeDeleteCondition.length() >= 0){
                %>
                    mergeQuery_<%=cid %> += "AND " + <%=mergeDeleteCondition %>;
                <%  
                }
            }
            %>
            mergeQuery_<%=cid %> += " THEN DELETE"; 
        <%
        }
        if (useMergeInsert) {
            boolean isfirstInsertWhere = true;
            String keyColumnName=null;
            for(Map<String, String> keyColumn:insertColumns){
                if (keyColumn.get("INSERT").equals("true")) {
                    if (isfirstInsertWhere) {
                        isfirstInsertWhere = false;
                    }else {
                        mergeInsertName.append(",");
                        mergeInsertValue.append(",");
                    }
                    keyColumnName=keyColumn.get("SCHEMA_COLUMN");
                    keyColumnName = new Column(metadata.getColumn(keyColumnName)).getName();
                    mergeInsertName.append(keyColumnName);
                    mergeInsertValue.append("source." + keyColumnName);
                }
            }
            %>
            mergeQuery_<%=cid %> += " WHEN NOT MATCHED  " ;
            <%
            if (useInsertCondition) {
                String mergeInsertCondition = ElementParameterParser.getValue(node,"__MERGE_INSERT_CONDITION__");
                if(mergeInsertCondition != null && mergeInsertCondition.length() >= 0){
                %>
                    mergeQuery_<%=cid %> += "AND " + <%=mergeInsertCondition %>;
                <%  
                }
            }
            %>
            mergeQuery_<%=cid %> += " THEN INSERT ( <%=mergeInsertName%>) VALUES ( <%=mergeInsertValue%>) ";
        <%
        }
        %>
        pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement(mergeQuery_<%=cid %>);
        <%
		}
        %>
	int nb_line_<%=cid%> = 0;
	int nb_line_updated_<%=cid%> = 0;
	int nb_line_inserted_<%=cid%> = 0;
	int nb_line_deleted_<%=cid%> = 0;
<%
	
}

		if(dbtable != null && columnList != null){
			if(("INSERT").equals(dataAction)){
%>
		System.out.println("Inserting with : \n" + insertQuery_<%=cid %> + "\n");
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+insertQuery_"+ cid +"+\"");%> 
		nb_line_<%=cid%> += nb_line_inserted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
		System.out.println("--> " + nb_line_inserted_<%=cid%> + " rows inserted. \n");
<%
			}else if(("UPDATE").equals(dataAction)){
%>
		System.out.println("Updating with : \n" + updateQuery_<%=cid %>.toString() +"\n");
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+updateQuery_"+ cid +"+\"");%> 
		nb_line_<%=cid%> += nb_line_updated_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
		System.out.println("--> " + nb_line_updated_<%=cid%> + " rows updated. \n");
<%
			}else if (("DELETE").equals(dataAction)){
%>
		System.out.println("Deleting with : \n" + deleteQuery_<%=cid %>.toString() +"\n");
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+deleteQuery_"+ cid +"+\"");%> 
		nb_line_<%=cid%> += nb_line_deleted_<%=cid%> = pstmt_<%=cid %>.executeUpdate();
		<%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
		System.out.println("--> " + nb_line_deleted_<%=cid%> + " rows deleted. \n");
<%
            }else if (("MERGE").equals(dataAction)){
%>
        System.out.println("Merge with : \n" + mergeQuery_<%=cid %> +"\n");
        <%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executing SQL:\"+mergeQuery_"+ cid +"+\"");%>
        nb_line_<%=cid%> += pstmt_<%=cid %>.executeUpdate();
        <%log4jCodeGenerateUtil.logInfo(node,"info",cid+" - Executed successfully.");%>
        System.out.println("--> rows merged. \n");
<%

			}
		}
%>

	pstmt_<%=cid %>.close();
<%
		if(!useExistingConn) {
%>
    if(conn_<%=cid%> != null && !conn_<%=cid%>.isClosed()) {
		<%log4jCodeGenerateUtil.close(node);%>
    }
<%
		}
%>

globalMap.put("<%=cid %>_NB_LINE",nb_line_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_UPDATED",nb_line_updated_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_INSERTED",nb_line_inserted_<%=cid%>);
globalMap.put("<%=cid %>_NB_LINE_DELETED",nb_line_deleted_<%=cid%>);
<%
if(isLog4jEnabled){
	Map<String,String> actionMap=new java.util.HashMap<String,String>();
	actionMap.put("INSERT","inserted");
	actionMap.put("UPDATE","updated");
	actionMap.put("DELETE","deleted");
    if(!"MERGE".equals(dataAction)){
	%>
	   log.info("<%=cid%> - Has <%=actionMap.get(dataAction)%> records count: " + nb_line_<%=actionMap.get(dataAction)%>_<%=cid%> + ".");
    <%
    }else{
    %>
       log.info("<%=cid%> - Has merged records.");
    <%
    }
}
%>
