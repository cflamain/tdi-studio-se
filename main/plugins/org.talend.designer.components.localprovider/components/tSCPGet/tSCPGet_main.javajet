<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
	org.talend.core.model.utils.NodeUtil
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();      
    String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");
    String replaceOption = ElementParameterParser.getValue(node,"__REPLACEOPTION__");
    List<Map<String, String>> filelist = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__FILELIST__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    boolean enforceUnixPath = ("true").equals(ElementParameterParser.getValue(node,"__FORCE_UNIX_PATH__"));
		String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
		String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
		if(("true").equals(useExistingConn)){
		    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		    INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
		    authMethod = ElementParameterParser.getValue(connectionNode,"__AUTH_METHOD__");
		}
%>

                                       org.apache.sshd.scp.client.ScpClientCreator instance_<%=cid%> = org.talend.components.talendscp.TalendScpClientCreator.INSTANCE;
                                       org.apache.sshd.scp.client.ScpClient scp_<%=cid%> = instance_<%=cid%>.createScpClient(session_<%=cid%>);


	String[] sourceFileNames_<%=cid%> = new String[]{
<%
		for (Map<String, String> file : filelist) {
%>
			<%=file.get("SOURCE")%>,
<%          
        }
%>
	};
	java.io.File dir_<%=cid %> = null;
	try{
<%
		if(("append").equals(replaceOption)){
%>
			for (String sourceFile_<%=cid %> : sourceFileNames_<%=cid %>) {
				if (sourceFile_<%=cid %> != null&& sourceFile_<%=cid %>.length() != 0) {
<%
					if (!enforceUnixPath) {
%>
						    sourceFile_<%=cid %> = sourceFile_<%=cid %>.replaceAll("\\\\","/");
<%
						}
%>


					int index_<%=cid %>=sourceFile_<%=cid %>.lastIndexOf("/");
					if(index_<%=cid %> >0){
						dir_<%=cid %> = new java.io.File(<%=localdir %>);
						String extension_<%=cid %>=	sourceFile_<%=cid %>.substring(index_<%=cid %>,sourceFile_<%=cid %>.length());
						java.io.File file_<%=cid %> = new java.io.File(dir_<%=cid %>, extension_<%=cid %>);
						if(!file_<%=cid %>.exists()){
						  file_<%=cid %>.getParentFile().mkdirs();
						}
						java.io.FileOutputStream out_<%=cid %> = null;
						
						//copy action
						int receive_<%=cid%> = -1;
						try {
							out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid %>, true);
							scp_<%=cid%>.download("\""+sourceFile_<%=cid %>+"\"",out_<%=cid %>);

						} catch(java.lang.Exception e_<%=cid%>) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
		                	if(out_<%=cid %> != null){
		                		out_<%=cid %>.close();
		                	}
							//only delete empty file when exception happen?this is old action,we keep it.
		            		if(file_<%=cid%>.length() == 0){
		            			file_<%=cid%>.delete();
		            		}
		            		throw e_<%=cid%>;
						} finally {
		                	if(out_<%=cid %> != null){
		                		out_<%=cid %>.close();
		                	}
		                	

						}
						nb_file_<%=cid%> ++ ;
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - Downloaded file " + nb_file_<%=cid%> +  ": " + sourceFile_<%=cid %> + " successfully.");
							log.info("<%= cid %> - Appended to "+sourceFile_<%=cid %>+" at local directory "+<%= localdir %>+" successfully.");
						<%}%>
					}
				}
			}
			if(nb_file_<%=cid%>>0){
				globalMap.put("<%=cid %>_STATUS", "File get OK.");
			}else{
				globalMap.put("<%=cid %>_STATUS", "No file transfered.");
			}
<%
		}else{
			boolean isDefaultAction = !("overwrite").equals(replaceOption);
			if(isDefaultAction) {
%>
		    	String parentPath_<%=cid%> = new java.io.File(<%=localdir %>).getPath();
				java.util.List<String> list_<%=cid%> = new java.util.ArrayList<String>();
				for (int i_<%=cid%> = 0; i_<%=cid%> < sourceFileNames_<%=cid%>.length; i_<%=cid%>++) {
		        	String fileName_<%=cid%> = sourceFileNames_<%=cid%>[i_<%=cid%>];
		            if (!new java.io.File((parentPath_<%=cid%>), (fileName_<%=cid%>)).exists()) {
		                list_<%=cid%>.add(fileName_<%=cid%>);
		            }
		        }
		        sourceFileNames_<%=cid%> = (String[]) list_<%=cid%>.toArray(new String[0]);
<%
			}
%>
			if(sourceFileNames_<%=cid%>!=null && sourceFileNames_<%=cid%>.length!=0){
				for (String sourceFile_<%=cid %> : sourceFileNames_<%=cid %>) {
					if (sourceFile_<%=cid %> != null&& sourceFile_<%=cid %>.length() != 0) {
<%
						if (!enforceUnixPath) {
%>
							sourceFile_<%=cid %> = sourceFile_<%=cid %>.replaceAll("\\\\","/");
<%
						}
%>
						int index_<%=cid %>=sourceFile_<%=cid %>.lastIndexOf("/");
						if(index_<%=cid %> >0){
							dir_<%=cid %> = new java.io.File(<%=localdir %>);
							String extension_<%=cid %>=	sourceFile_<%=cid %>.substring(index_<%=cid %>,sourceFile_<%=cid %>.length());
							java.io.File file_<%=cid %> = new java.io.File(dir_<%=cid %>, extension_<%=cid %>);
							if(!file_<%=cid %>.exists()){
								file_<%=cid %>.getParentFile().mkdirs();
							}
							java.io.FileOutputStream out_<%=cid %> = null;
		    				//copy action
		    				byte[] buffer_<%=cid%> = new byte[8192];
		    				int receive_<%=cid%> = -1;
		    				try {
		    					out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid %>, false);
		    					scp_<%=cid%>.download("\""+sourceFile_<%=cid %>+"\"",out_<%=cid %>);

		    				} catch(java.lang.Exception e_<%=cid%>) {
                            globalMap.put("<%=cid%>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
		                    	if(out_<%=cid %> != null){
		                    		out_<%=cid %>.close();
		                    	}
		    					//only delete empty file when exception happen?this is old action,we keep it.
		                		if(file_<%=cid%>.length() == 0){
		                			file_<%=cid%>.delete();
		                		}
		                		throw e_<%=cid%>;
		    				} finally {
		                    	if(out_<%=cid %> != null){
		                    		out_<%=cid %>.close();
		                    	}
		    				}
							nb_file_<%=cid%> ++ ;
							<%if(isLog4jEnabled){%>
								log.debug("<%=cid%> - Downloaded file " + nb_file_<%=cid%> +  ": " + sourceFile_<%=cid %> + " successfully.");
								<% if(isDefaultAction){ %>
									 log.info("<%= cid %> - Overwrote or appended to "+sourceFile_<%=cid %>+" at local directory "+<%= localdir %>+" successfully.");
								<%
								}else{
								%>
									 log.info("<%= cid %> - Overwrote to "+sourceFile_<%=cid %>+" at local directory "+<%= localdir %>+" successfully.");
								<%
								}
							}%>
						}
					}
				}
				if(nb_file_<%=cid%>>0){
					globalMap.put("<%=cid %>_STATUS", "File get OK.");
				}else{
					globalMap.put("<%=cid %>_STATUS", "No file transfered.");
				}
			}
<%
		}
%>
	}catch(java.lang.Exception e_<%=cid%>){
		globalMap.put("<%=cid %>_STATUS", "File get fail.");
		globalMap.put("<%=cid %>_NB_FILE",nb_file_<%=cid%>);
		globalMap.put("<%=cid %>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
		throw e_<%=cid%>;
	}
