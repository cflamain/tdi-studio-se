<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
%>
<%@ include file="../templates/DB/HelpClass/HelpClass.javajet"%>
<%
	class ConnectionUtil extends DefaultConnectionUtil{

        int driveVersion;
        Boolean useStringProperties;
        String logLevel;
        String jdbcUrl;

        public void createURL(INode node) {
            super.createURL(node);

            boolean useLogFile= "true".equals(ElementParameterParser.getValue(node, "__USE_LOG_FILE__"));
            String logFile= ElementParameterParser.getValue(node, "__LOG_FILE__");
            jdbcUrl = ElementParameterParser.getValue(node, "__JDBC_URL__");
            driveVersion = "DRIVER_V2".equals(ElementParameterParser.getValue(node, "__DRIVER_VERSION__"))? 2 : 1;
            useStringProperties = "true".equals(ElementParameterParser.getValue(node, "__USE_STRING_PROPERTIES__"));
            logLevel= ElementParameterParser.getValue(node, "__LOG_LEVEL__");

		if(!logLevel.equals("0")){	
			if (useLogFile) {
%>
				java.io.Writer output_<%=cid %> = new java.io.FileWriter(<%= logFile %>, true);
				java.io.PrintWriter logWriter_<%=cid %> = new java.io.PrintWriter(output_<%=cid %>,true);
    			globalMap.put("fileLogWriter_<%=cid %>", logWriter_<%=cid %>);
    			java.sql.DriverManager.setLogWriter(logWriter_<%=cid %>);
			<%
			}
%>

		<%}%>
            StringBuilder sbuilder_<%=cid%> = new StringBuilder();
            sbuilder_<%=cid%>.append("jdbc:redshift:");
<%
            if ("SSO".equals(jdbcUrl)){
%>
                sbuilder_<%=cid%>.append("iam:");
<%
            }
%>
            sbuilder_<%=cid%>.append("//")
                             .append(<%=dbhost%>)
                             .append(":")
                             .append(<%=dbport%>)
                             .append("/")
                             .append(<%=dbname%>);

                             <%
            if( useStringProperties || driveVersion == 1){
                             %>

                             sbuilder_<%=cid%>.append("?loglevel=").append(<%=logLevel%>);
<%
            }
            if((driveVersion == 1 || useStringProperties) && dbproperties != null && !"\"\"".equals(dbproperties) && !"".equals(dbproperties)) {
%>
                sbuilder_<%=cid%>.append("&").append(<%=dbproperties%>);
<%
            }
%>
            String url_<%=cid%> = sbuilder_<%=cid%>.toString();
<%
		}

				public void createConnection(INode node) {
				     if(driveVersion == 2 && !useStringProperties){
				     List<Map<String, String>> properties = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ENTRY_PROPERTIES__");
        %>

                    java.util.Properties properties_<%=cid%> = new java.util.Properties();
                                    properties_<%=cid%>.setProperty("user",dbUser_<%=cid%>);
<%
                                            if ("SSO".equals(jdbcUrl)){
%>
                                                if (dbPwd_<%=cid%> != null) {
<%
                                            }
%>
                                                    properties_<%=cid%>.setProperty("password",dbPwd_<%=cid%>);
<%
                                            if ("SSO".equals(jdbcUrl)){
%>
                                                }
<%
                                            }
%>
                                    <%
                                    for(Map<String, String> entry : properties){
                                    %>
                                    properties_<%=cid%>.setProperty(<%=entry.get("KEY")%>,<%=entry.get("VALUE")%>);
                                    <%}%>
                                    properties_<%=cid%>.setProperty("loglevel","<%=logLevel%>");

                	conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>,properties_<%=cid%>);
        <%
                     } else {

        %>
                     conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
        <%

                     }
        		}
		
		public String getDirverClassName(INode node){
			return "com.amazon.redshift.jdbc42.Driver";
		}
		
	}//end class
	connUtil = new ConnectionUtil();
%>
<%//----------------------------component codes-----------------------------------------%>

	<%@ include file="../templates/DB/AbstractDBConnection.javajet"%>
	globalMap.put("schema_" + "<%=cid%>",<%=dbschema%>);

