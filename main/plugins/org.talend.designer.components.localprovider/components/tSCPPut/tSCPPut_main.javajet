<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
	org.talend.core.model.utils.NodeUtil
"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
    List<Map<String, String>> filelist =(List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__FILELIST__");
        String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
        String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
             	if(("true").equals(useExistingConn)){
             	    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
             	    INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
             		authMethod = ElementParameterParser.getValue(connectionNode,"__AUTH_METHOD__");
             		}
%>
    java.util.List<java.nio.file.Path> sourceList_<%=cid %> = new java.util.ArrayList<java.nio.file.Path>();

    java.io.File[] files_<%=cid%> = new java.io.File[]{

<%
        for (Map<String, String> file : filelist) {
%>
         new java.io.File(<%=file.get("SOURCE") %>),
<%
    				}
%>
        };
        for (java.io.File file_<%=cid%>:files_<%=cid%>) {
        			if((file_<%=cid%>.exists())
        			&& (file_<%=cid%>.isFile()) && (!uploadedSet_<%=cid %>.contains(file_<%=cid%>.toPath()))){
        				sourceList_<%=cid %>.add(file_<%=cid%>.toPath());
        			}else{
                          <%if(isLog4jEnabled){%>
                                log.warn("<%=cid%> - "+file_<%=cid%>.getPath()+" doesn't exist or it isn't a file.");
                          <%}%>
                	}
                	}

		java.nio.file.Path[] sourceFileNames_<%=cid%> = sourceList_<%=cid %>.toArray(new java.nio.file.Path[0]);


                                        org.apache.sshd.scp.client.ScpClientCreator instance_<%=cid%> = org.talend.components.talendscp.TalendScpClientCreator.INSTANCE;
                                        org.apache.sshd.scp.client.ScpClient scp_<%=cid%> = instance_<%=cid%>.createScpClient(session_<%=cid%>);
                            try{
                                if(sourceFileNames_<%=cid%>.length > 0){
                                String remotedir_<%=cid%> = String.valueOf(<%=remotedir %>);
                                remotedir_<%=cid%> = remotedir_<%=cid%>.endsWith("/")?("\""+remotedir_<%=cid%>+"\""):("\""+remotedir_<%=cid%>+"/\"");
                                    scp_<%=cid%>.upload(sourceFileNames_<%=cid%>,remotedir_<%=cid%>);
                                    uploadedSet_<%=cid %>.addAll(java.util.Arrays.asList(sourceFileNames_<%=cid%>));
            globalMap.put("<%=cid %>_STATUS", "File put OK.");
        }else{
        	globalMap.put("<%=cid %>_STATUS", "No file transfered.");
        }
    }catch(java.lang.Exception e){
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
    		e.printStackTrace();
    		<%if(isLog4jEnabled){%>
                log.error(e.getMessage());
    		<%}%>
    		globalMap.put("<%=cid %>_STATUS", "File put fail.");
    }
