<%@ jet
imports="
        java.util.List
        java.util.Map
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
		"
%>
<%
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);

	if (metadata != null) {
		List<IMetadataColumn> columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		// if output columns are defined
		if(nbSchemaColumns > 0 && outgoingConns != null && outgoingConns.size() > 0){
		    
		    String authType = ElementParameterParser.getValue(node, "__AUTH_TYPE__");
		    String onlineRegisterApp = ElementParameterParser.getValue(node, "__ONLINE_REGISTERED_APP__");
		    String userName = ElementParameterParser.getValue(node, "__USERNAME__");
		    String domain = ElementParameterParser.getValue(node, "__DOMAIN__");
		    String host = ElementParameterParser.getValue(node, "__HOST__");
		    String serviceURL = ElementParameterParser.getValue(node, "__SERVICE_ROOT_URL__");
		    String applicationId = ElementParameterParser.getValue(node, "__APPLICATION_ID__");
		    String authority = ElementParameterParser.getValue(node, "__AUTHORITY__");
		    String oauthTokenEndpoint = ElementParameterParser.getValue(node, "__OAUTH_TOKEN_ENDPOINT__");
		    String premiseOAuthFlow = ElementParameterParser.getValue(node, "__PREMISE_AUTH_FLOW__");
		    if(premiseOAuthFlow == null || premiseOAuthFlow.trim().isEmpty()){
		    	// I set a default value
		    	premiseOAuthFlow = "AUTHORIZATION_CODE";
		    }
		    String timeout = ElementParameterParser.getValue(node, "__TIMEOUT__");
		    boolean reuseHttpClient = ("true").equals(ElementParameterParser.getValue(node,"__REUSE_HTTP_CLIENT__"));

		    String redirectUrl = ElementParameterParser.getValue(node, "__REDIRECT_URL__");
		    String premiseAuth = ElementParameterParser.getValue(node, "__PREMISE_AUTH__");

		    boolean force_oauth_resource = ("true").equals(ElementParameterParser.getValue(node, "__FORCE_OAUTH_RESOURCE__"));
		    String oauth_resource = ElementParameterParser.getValue(node, "__OAUTH_RESOURCE__");
		    oauth_resource = force_oauth_resource ? oauth_resource : null;

		    // TODO Because of current retrieve would close httpclient automatically
        	    // Need to recreated httpclient for every page query
			reuseHttpClient =false;
			
			String entitySetName = ElementParameterParser.getValue(node, "__ENTITYSET__").trim();

			boolean isV2018 = ("ONLINE".equals(authenticationType) && "API_2018_ODATA".equals(crmOnlineVersion)) || ("ON_PREMISE".equals(authenticationType) && "CRM_2018".equals(crmVersion));
			if(isV2018){
				entitySetName = ElementParameterParser.getValue(node, "__ENTITYSETV2018__").trim();
			}

     		String customEntityname = ElementParameterParser.getValue(node, "__CUSTOM_ENTITY_NAME__");
     		if("CustomEntitySet".equals(entitySetName)){
			%>
				String entitySetName_<%=cid%>=<%=customEntityname%>;
			<%
			}else{
			%>
				String entitySetName_<%=cid%>="<%=entitySetName%>";
			<%	
			}
			boolean debug = ("true").equals(ElementParameterParser.getValue(node,"__DEBUG__"));
			if(debug){
			%>
			System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.SimpleLog");
		    	System.setProperty("org.apache.commons.logging.simplelog.showdatetime", "true");
		    	System.setProperty("org.apache.commons.logging.simplelog.log.httpclient.wire", "debug");
		    	System.setProperty("org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient", "debug");
			<%
			}else{
			%>
				System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
			<%
			}
			%>
			
			<%String passwordFieldName = "__PASSWORD__";%>
			String password_<%=cid%>;
			{
				<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
				password_<%=cid%> = decryptedPassword_<%=cid%>;
			}
			<%passwordFieldName = "__CLIENT_SECRET__";%>
			String clientSecret_<%=cid%>;
			{
				<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
				clientSecret_<%=cid%> = decryptedPassword_<%=cid%>;
			}

			<%
			    if(isMsCrm2016OnPremise) {
				if("NTLM".equals(premiseAuth)){
			%>
			    org.talend.ms.crm.odata.ClientConfiguration clientConfig_<%=cid%> = org.talend.ms.crm.odata.ClientConfigurationFactory
                        .buildNtlmClientConfiguration(<%=userName%>, password_<%=cid%>, <%=host%>, <%=domain%>);
			<%
				}
				else{
					if("ROPC".equals(premiseOAuthFlow)) {
			%>
					    org.talend.ms.crm.odata.ClientConfiguration clientConfig_<%=cid%> = org.talend.ms.crm.odata.ClientConfigurationFactory
					.buildOAuthPremiseROPCClientConfiguration(<%=userName%>, password_<%=cid%>, <%=oauthTokenEndpoint%>, <%=serviceURL%>, <%=applicationId%>, clientSecret_<%=cid%>, <%=oauth_resource%>, "");
			<%
					}
					else {
			%>
			    org.talend.ms.crm.odata.ClientConfiguration clientConfig_<%=cid%> = org.talend.ms.crm.odata.ClientConfigurationFactory
                        .buildOAuthPremiseClientConfiguration(<%=userName%>, password_<%=cid%>, <%=authority%>, <%=serviceURL%>, <%=applicationId%>, clientSecret_<%=cid%>, <%=redirectUrl%>, <%=oauth_resource%>);
			<%
					}
				}
			    } else {
			    	if("NATIVE".equals(onlineRegisterApp)){
					%>
					    org.talend.ms.crm.odata.ClientConfiguration clientConfig_<%=cid%> = org.talend.ms.crm.odata.ClientConfigurationFactory
		                        .buildOAuthNativeClientConfiguration(<%=applicationId%>, <%=userName%>, password_<%=cid%>, <%=authority%>);
					<%
					}
					else {
						String permission = "org.talend.ms.crm.odata.ClientConfiguration.WebAppPermission.";
						permission += ("WEB_DELEGATED".equals(onlineRegisterApp)) ?  "DELEGATED" : "APPLICATION";
					%>
			    		org.talend.ms.crm.odata.ClientConfiguration clientConfig_<%=cid%> = org.talend.ms.crm.odata.ClientConfigurationFactory
		                        .buildOAuthWebClientConfiguration(<%=applicationId%>, clientSecret_<%=cid%>, <%=userName%>, password_<%=cid%>, <%=authority%>, <%=permission%>);
					<%
					}
                }

                List<Map<String, String>> headersArray = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HEADERS__");
                if(headersArray.size() > 0){
         	    %>
		    java.util.Map<String, String> custom_headers_<%=cid%> = new java.util.HashMap();
		    <%
		    for(java.util.Map<String, String> e: headersArray) {
		    %>
		    custom_headers_<%=cid%>.put(<%=e.get("KEY")%>, <%=e.get("VALUE")%>);
		    <%
		    }
		    %>
		    clientConfig_<%=cid%>.setCustomHeaders(custom_headers_<%=cid%>);
		    <%
		}
            %>
				
				
				clientConfig_<%=cid%>.setTimeout(<%=timeout%>);
				clientConfig_<%=cid%>.setMaxRetry(reConnMaxNum_<%=cid%>,<%=attemptsInterval%>);
				clientConfig_<%=cid%>.setReuseHttpClient(<%=reuseHttpClient%>);

				org.talend.ms.crm.odata.DynamicsCRMClient client_<%=cid%> = new org.talend.ms.crm.odata.DynamicsCRMClient(clientConfig_<%=cid%>,<%=serviceURL%>,entitySetName_<%=cid%>);
				String queryFilter_<%=cid%>=null;
                                List<String> expands_<%=cid%> = new java.util.ArrayList<>();
				<%
	     		String logical = ElementParameterParser.getValue(node,"__LOGICAL_OP__");
	     		boolean isSpecifyComplexFilter="true".equals(ElementParameterParser.getValue(node, "__SPECIFY_COMPLEX_FILTER__"));
	     		if(isSpecifyComplexFilter){
	     			String customQueryFilter = ElementParameterParser.getValue(node, "__CUSTOM_FILTER__");
	     			%>
	     			queryFilter_<%=cid%>=<%=customQueryFilter%>;
	     		<%
	     		}else{
		     		List<Map<String, String>> keyColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__CONDITIONS__");
		        	if(keyColumns.size()>0 ){
					%>
						java.util.List<String> fields_<%=cid%> = new java.util.ArrayList<String>();
						java.util.List<org.talend.ms.crm.odata.ConditionOperator> conditionOperators_<%=cid%> = new java.util.ArrayList<org.talend.ms.crm.odata.ConditionOperator>();
			        	java.util.List<Object> values_<%=cid%> = new java.util.ArrayList<Object>();
		            <%
		            for(Map<String, String> keyColumn:keyColumns){
		        		%>
		        			fields_<%=cid%>.add("<%=keyColumn.get("INPUT_COLUMN")%>");
		        			conditionOperators_<%=cid%>.add(org.talend.ms.crm.odata.ConditionOperator.<%=keyColumn.get("OPERATOR")%>);
		        			values_<%=cid%>.add(<%=keyColumn.get("RVALUE")%>);
		       		<%
		        		}
		        		%>
		        		queryFilter_<%=cid%>=org.talend.ms.crm.odata.QueryFilterUtil.getURIFilterString(org.talend.ms.crm.odata.LogicalOperator.<%=logical%>, fields_<%=cid%>, conditionOperators_<%=cid%>, values_<%=cid%>);
		        	<%
		        	}
	     		}

                        
		     	List<Map<String, String>> expandArray = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXPANDS__");
                        if(expandArray.size() > 0){
				%>
				java.util.List<String> expand_incol_<%=cid%> = new java.util.ArrayList<String>();
				java.util.List<String> expand_params_<%=cid%> = new java.util.ArrayList<String>();
				java.util.List<String> expand_outcol_<%=cid%> = new java.util.ArrayList<String>();
                                <%
                                for(Map<String, String> expandRow : expandArray) {
                                    %>
                                        expand_incol_<%=cid%>.add("<%=expandRow.get("INPUT_COLUMN")%>");
                                        expand_params_<%=cid%>.add("<%=expandRow.get("EXPAND_PARAMS")%>");
                                    <%
                                }
                                %>
                                        expands_<%=cid%> = org.talend.ms.crm.odata.QueryExpandUtil.getExpandConfig(expand_incol_<%=cid%>, expand_params_<%=cid%>);
                                <%
                        }
			java.util.List<String> expandOutColNames = new java.util.ArrayList();
			for(java.util.Map<String, String> expandArrayRow : expandArray){
				expandOutColNames.add(expandArrayRow.get("OUTPUT_COLUMN"));
	                }


	     		boolean isOrderBy="true".equals(ElementParameterParser.getValue(node, "__ORDER_BY__"));
	     		List<Map<String, String>> orderByColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ORDER_BY_TABLE__");
	     		if(isOrderBy && orderByColumns.size()>0){
	        		StringBuilder sbOrderBy = new StringBuilder();
	        		for(int i=0;i<orderByColumns.size();i++){
	        			Map<String, String> orderByColumn =orderByColumns.get(i);
	        			if(i!=0){
	        				sbOrderBy.append(",");
	        			}
	        			sbOrderBy.append(orderByColumn.get("COLUMN_NAME"));
	        			if("true".equalsIgnoreCase(orderByColumn.get("DESC"))){
	        				sbOrderBy.append(" desc");
	        			}
	        		}
	        		%>
	     			String orderBy_<%=cid%>="<%=sbOrderBy.toString()%>";
	     			<%
	     		}
	        	StringBuilder sb = new StringBuilder("");
	        	for(IMetadataColumn column: columnList){
					if(!expandOutColNames.contains(column.getLabel())){
	  				   sb.append("\"");
	  				   sb.append(column.getLabel());
	  				   sb.append("\",");
	        	               }
	        	}
	        	sb.deleteCharAt(sb.lastIndexOf(","));
	        	IConnection outgoingConn = outgoingConns.get(0);
				if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	%>
					org.talend.ms.crm.odata.QueryOptionConfig queryOption_<%=cid%> = new org.talend.ms.crm.odata.QueryOptionConfig();
		        	queryOption_<%=cid%>.setReturnEntityProperties(new String[]{<%=sb%>});
		        	//TODO need to support top(limit)?
		        	// queryOption_<%=cid%>.setTop(5000);
					queryOption_<%=cid%>.setFilter(queryFilter_<%=cid%>);
					queryOption_<%=cid%>.setExpands(expands_<%=cid%>);
					<%
					if(isOrderBy && orderByColumns.size()>0){
					%>
						queryOption_<%=cid%>.setOrderBy(orderBy_<%=cid%>);
					<%
					}
					%>
				   java.net.URI nextPageURI_<%=cid%>=null;
		        	while(true){
		        		org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetRequest<org.apache.olingo.client.api.domain.ClientEntitySet> request_<%=cid%> = client_<%=cid%>.createEntityRetrieveRequest(queryOption_<%=cid%>);
		        		if(nextPageURI_<%=cid%>!=null){
		        			request_<%=cid%>.setURI(nextPageURI_<%=cid%>);
		        		}
		        		org.apache.olingo.client.api.communication.response.ODataRetrieveResponse<org.apache.olingo.client.api.domain.ClientEntitySet> response_<%=cid%> = request_<%=cid%>.execute();
        				org.apache.olingo.client.api.domain.ClientEntitySet clientEntitySet_<%=cid%> = response_<%=cid%>.getBody();
		        		for (org.apache.olingo.client.api.domain.ClientEntity entity_<%=cid%>:clientEntitySet_<%=cid%>.getEntities()) {
		               nb_line_<%=cid%>++;


	                  final java.util.Map<String, org.apache.olingo.client.api.domain.ClientLink> expandLinks_<%=cid%> = entity_<%=cid%>.getNavigationLinks().stream().collect(java.util.stream.Collectors.toMap(org.apache.olingo.client.api.domain.ClientLink::getName, java.util.function.Function.identity()));
	                  <%
                          for(Map<String, String> expandRow : expandArray) {
				String in_col = expandRow.get("INPUT_COLUMN");
                          %>
	
	                  final String sanitizedName_<%=in_col%>_<%=cid%> = org.talend.ms.crm.odata.QueryExpandUtil.getSanitizedName("<%=in_col%>");

	                  try (java.io.InputStreamReader isr = new java.io.InputStreamReader(client_<%=cid%>.getClient().getWriter().writeProperty(entity_<%=cid%>.getProperty(sanitizedName_<%=in_col%>_<%=cid%>), org.apache.olingo.commons.api.format.ContentType.APPLICATION_JSON));
	                       java.io.BufferedReader br = new java.io.BufferedReader(isr)) {
	                          <%=outgoingConn.getName()%>.<%=expandRow.get("OUTPUT_COLUMN")%> = br.lines().collect(java.util.stream.Collectors.joining("\n"));
	                  }
	                  <%
			  }
	                  %>


	                  <%
							for(int i = 0; i < columnList.size(); i++){//for begin
								IMetadataColumn column = columnList.get(i);
	
								if(expandOutColNames.contains(column.getLabel())){
									continue;
								}
	
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
	
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								%>
								org.apache.olingo.client.api.domain.ClientProperty property_<%=column.getLabel()%>_<%=cid%> =entity_<%=cid%>.getProperty("<%=column.getLabel()%>");
								if(property_<%=column.getLabel()%>_<%=cid%>!=null && !property_<%=column.getLabel()%>_<%=cid%>.hasNullValue()){
		        					<%
		       						if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT){
		        					%>
		        						<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = property_<%=column.getLabel()%>_<%=cid%>.getValue().toString();
		        					<%
		        					}else if(javaType == JavaTypesManager.DATE){ // Date
		        					%>
		        						<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_Date(property_<%=column.getLabel()%>_<%=cid%>.getValue().toString(), <%= patternValue %>);
		        					<%
		        					}else if(javaType == JavaTypesManager.BYTE_ARRAY){ // Byte[]
		        					%>
		        					    String property_<%=column.getLabel()%>_<%=cid%>_type = property_<%=column.getLabel()%>_<%=cid%>.getValue().getTypeName();
		        						if("Edm.Binary".equals(property_<%=column.getLabel()%>_<%=cid%>_type)){
		        						    <%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = (byte[])property_<%=column.getLabel()%>_<%=cid%>.getValue().asPrimitive().toValue();
		        						}
		        						else{
		        						    org.apache.olingo.commons.api.edm.EdmPrimitiveType edmpt = org.apache.olingo.commons.core.edm.primitivetype.EdmPrimitiveTypeFactory.getInstance(org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind.Binary);
                                            <%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = (byte[])edmpt.valueOfString(property_<%=column.getLabel()%>_<%=cid%>.getValue().toString(), null, null, org.apache.olingo.commons.api.Constants.DEFAULT_PRECISION, org.apache.olingo.commons.api.Constants.DEFAULT_SCALE, null, byte[].class);
		        						}
		        					<%
		        					}else{ // other
		        					%>
		        						<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = ParserUtils.parseTo_<%=typeToGenerate%>(property_<%=column.getLabel()%>_<%=cid%>.getValue().toString());
		        					<%
		        					}
		        					%>
	        					}else{
	        						<%=outgoingConn.getName()%>.<%=columnList.get(i).getLabel()%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
	        					}
	        				<%
							}//for end
							%>
				<%
			}
		}
	}
}
%>
