<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
" 
%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	List<IMetadataTable> metadatas = node.getMetadataList();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	boolean useTwelveHourFormat = ("true").equals(ElementParameterParser.getValue(node, "__USE_12_HOUR_FORMAT__"));
	if ((metadatas!=null)&&(metadatas.size()>0)) {
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {
			
	        String encoding = ElementParameterParser.getValue(node,"__ENCODING__");
			
			if(metadata.isDynamicSchema()) {
			%>
			class BigQueryOutputHelper_<%=cid%> {
				private final boolean useTwelveHourFormat;
				public BigQueryOutputHelper_<%=cid%>(boolean useTwelveHourFormat) {
					this.useTwelveHourFormat = useTwelveHourFormat;
				}
				public void writeData(routines.system.Dynamic column, String[] row, int offset) {
					for (int i = 0; i < column.getColumnCount(); i++) {
						if (column.getColumnValue(i) != null) {
							routines.system.DynamicMetadata metadata = column.getColumnMetadata(i);
							String dataType = routines.system.MetadataTalendType.getDefaultSelectedDbType("bigquery_id", metadata.getType(), -1, -1);
							String orignalDBType = metadata.getDbType();
							java.util.List<String> outputDBTypelist = routines.system.MetadataTalendType.getTalendToDBList("bigquery_id", metadata.getType());
							if (outputDBTypelist != null && outputDBTypelist.size() > 0) {
								for (String dbType : outputDBTypelist) {
									if (orignalDBType.equalsIgnoreCase(dbType)) {
										dataType = dbType;
										break;
									}
								}
							}
							if (dataType == null || ("").equals(dataType)) {
								dataType = orignalDBType;
							}
							if ("id_Date".equals(metadata.getType())) {
								String pattern = getPattern(dataType);
								row[offset + i] = routines.system.DynamicUtils.formatDate(column.getColumnValue(i), pattern);
							} else if ("id_byte[]".equals(metadata.getType())) {
								row[offset + i] = java.nio.charset.Charset.forName(<%=encoding %>).decode(java.nio.ByteBuffer.wrap((byte[])column.getColumnValue(i))).toString();
							} else {
								row[offset + i] = String.valueOf(column.getColumnValue(i));
							}
						}
					}
				}
				public String getPattern(String typeName) {
					String hourFormat;
					if(useTwelveHourFormat) {
						hourFormat = "hh";
					} else {
						hourFormat = "HH";
					}
					if(typeName == null) {
						return "yyyy-MM-dd " + hourFormat + ":mm:ss.SSS";
					}
					switch(typeName.toUpperCase()) {
					case "TIMESTAMP":
						return "yyyy-MM-dd " + hourFormat + ":mm:ss.SSSXXX";
					case "DATE":
						return "yyyy-MM-dd";
					case "TIME":
						return hourFormat + ":mm:ss.SSS";
					case "DATETIME":
						return "yyyy-MM-dd " + hourFormat + ":mm:ss.SSS";
					default:
						return "yyyy-MM-dd " + hourFormat + ":mm:ss.SSS";
					}
				}
			}
			BigQueryOutputHelper_<%=cid%> bigQueryHelper_<%=cid%> = new BigQueryOutputHelper_<%=cid%>(<%=useTwelveHourFormat%>);
			<%
			}
			
	        String filename = ElementParameterParser.getValue(node,"__FILENAME__");
	        
	        String rowSeparator = ElementParameterParser.getValue(node,"__ROWSEPARATOR__");
	        
	        String fieldSeparator = ElementParameterParser.getValue(node,"__FIELDSEPARATOR__");
	        
	        String escapeChar = ElementParameterParser.getValue(node, "__ESCAPE_CHAR__");
	        
	        String textEnclosure = ElementParameterParser.getValue(node, "__TEXT_ENCLOSURE__");
	        
	        boolean checkDiskSpace = ("true").equals(ElementParameterParser.getValue(node,"__CHECK_DISK_SPACE__"));
	        
	        boolean isAppend = ("true").equals(ElementParameterParser.getValue(node,"__APPEND__"));
	        
	        boolean isCreateDir = ("true").equals(ElementParameterParser.getValue(node,"__CREATE__"));
	        
	        boolean containNULL = "true".equalsIgnoreCase(ElementParameterParser.getValue(node,"__RECORDS_CONTAIN_NULL_VALUE__"));
			%>
			int nb_line_<%=cid%> = 0;
			String rowSeparator_<%=cid %> = <%=rowSeparator.length()==0||("").equals(rowSeparator)?"\"\\n\"" : rowSeparator %>;
			String fieldSeparator_<%=cid %> = <%=fieldSeparator.length()==0||("").equals(fieldSeparator)?"\",\"" : fieldSeparator %>;
			char escapeChar_<%=cid %> = <%=escapeChar.length()==0||("").equals(escapeChar)?"'\\\\'" : escapeChar + ".charAt(0)"%>;
			char textEnclosure_<%=cid %> = <%=textEnclosure.length()==0||("").equals(textEnclosure)?"'\"'" : textEnclosure + ".charAt(0)"%>;
			
			<%
			if (containNULL) {//bug 7978 if input have a empty value,tMysqloutputbulk output "\N" instance of "" 
			%>
				escapeChar_<%=cid %> = textEnclosure_<%=cid %>;
			<%
			}
			%>
			if(escapeChar_<%=cid %>=='\\'){
			}else if(escapeChar_<%=cid %> == textEnclosure_<%=cid %>){
			}else {
				throw new RuntimeException("The escape mode only support the '\\' or double text enclosure.");
			}
					
			java.io.File file_<%=cid %> = new java.io.File(<%=filename %>);		
			<%
			if(isCreateDir) {
			%>
				<%
				if(isLog4jEnabled){
				%>
					log.info("<%=cid%> - Creating directory for file '" + file_<%=cid%>.getCanonicalPath() +"', if the directory not exist.");
				<%
				}
				%>
				file_<%=cid %>.getParentFile().mkdirs();
			<%
			}
			%>
					
			com.talend.csv.CSVWriter csvWriter_<%=cid%> = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
			new java.io.FileOutputStream(file_<%=cid %>, <%=isAppend %>), <%=encoding %>)));
			resourceMap.put("csvWriter_<%=cid%>", csvWriter_<%=cid%>);
	        csvWriter_<%=cid%>.setSeparator(fieldSeparator_<%=cid %>.charAt(0));
	        
	        csvWriter_<%=cid %>.setLineEnd(rowSeparator_<%=cid %>);              	
	        csvWriter_<%=cid %>.setEscapeChar(escapeChar_<%=cid %>);      		
	      	csvWriter_<%=cid %>.setQuoteChar(textEnclosure_<%=cid %>); 
	      	csvWriter_<%=cid %>.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);        
			<%
			if(checkDiskSpace){
			%>
	      		long diskSpace_<%=cid %> = 0;
			<%
			}
	    }
	}
	%>
